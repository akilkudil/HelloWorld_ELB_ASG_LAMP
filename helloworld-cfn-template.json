{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Demo for Arun and it creates a hello world service with Linux, Apache and PHP as runtime.",
	"Parameters": {
		"VpcId": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "VpcId of your existing Virtual Private Cloud (VPC)",
			"ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
		},
		"Subnets": {
			"Type": "List<AWS::EC2::Subnet::Id>",
			"Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
			"ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
		},
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"WebServerCapacity": {
			"Default": "2",
			"Description": "The initial nuber of WebServer instances",
			"Type": "Number",
			"MinValue": "2",
			"MaxValue": "5",
			"ConstraintDescription": "must be between 1 and 5 EC2 instances."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t1.micro",
				"t2.nano",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"c1.medium",
				"c1.xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"g2.8xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"d2.xlarge",
				"d2.2xlarge",
				"d2.4xlarge",
				"d2.8xlarge",
				"hi1.4xlarge",
				"hs1.8xlarge",
				"cr1.8xlarge",
				"cc2.8xlarge",
				"cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"SSHLocation": {
			"Description": " The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		}
	},
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "PV64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			},
			"m1.small": {
				"Arch": "PV64"
			},
			"m1.medium": {
				"Arch": "PV64"
			},
			"m1.large": {
				"Arch": "PV64"
			},
			"m1.xlarge": {
				"Arch": "PV64"
			},
			"m2.xlarge": {
				"Arch": "PV64"
			},
			"m2.2xlarge": {
				"Arch": "PV64"
			},
			"m2.4xlarge": {
				"Arch": "PV64"
			},
			"m3.medium": {
				"Arch": "HVM64"
			},
			"m3.large": {
				"Arch": "HVM64"
			},
			"m3.xlarge": {
				"Arch": "HVM64"
			},
			"m3.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.large": {
				"Arch": "HVM64"
			},
			"m4.xlarge": {
				"Arch": "HVM64"
			},
			"m4.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.4xlarge": {
				"Arch": "HVM64"
			},
			"m4.10xlarge": {
				"Arch": "HVM64"
			},
			"c1.medium": {
				"Arch": "PV64"
			},
			"c1.xlarge": {
				"Arch": "PV64"
			},
			"c3.large": {
				"Arch": "HVM64"
			},
			"c3.xlarge": {
				"Arch": "HVM64"
			},
			"c3.2xlarge": {
				"Arch": "HVM64"
			},
			"c3.4xlarge": {
				"Arch": "HVM64"
			},
			"c3.8xlarge": {
				"Arch": "HVM64"
			},
			"c4.large": {
				"Arch": "HVM64"
			},
			"c4.xlarge": {
				"Arch": "HVM64"
			},
			"c4.2xlarge": {
				"Arch": "HVM64"
			},
			"c4.4xlarge": {
				"Arch": "HVM64"
			},
			"c4.8xlarge": {
				"Arch": "HVM64"
			},
			"g2.2xlarge": {
				"Arch": "HVMG2"
			},
			"g2.8xlarge": {
				"Arch": "HVMG2"
			},
			"r3.large": {
				"Arch": "HVM64"
			},
			"r3.xlarge": {
				"Arch": "HVM64"
			},
			"r3.2xlarge": {
				"Arch": "HVM64"
			},
			"r3.4xlarge": {
				"Arch": "HVM64"
			},
			"r3.8xlarge": {
				"Arch": "HVM64"
			},
			"i2.xlarge": {
				"Arch": "HVM64"
			},
			"i2.2xlarge": {
				"Arch": "HVM64"
			},
			"i2.4xlarge": {
				"Arch": "HVM64"
			},
			"i2.8xlarge": {
				"Arch": "HVM64"
			},
			"d2.xlarge": {
				"Arch": "HVM64"
			},
			"d2.2xlarge": {
				"Arch": "HVM64"
			},
			"d2.4xlarge": {
				"Arch": "HVM64"
			},
			"d2.8xlarge": {
				"Arch": "HVM64"
			},
			"hi1.4xlarge": {
				"Arch": "HVM64"
			},
			"hs1.8xlarge": {
				"Arch": "HVM64"
			},
			"cr1.8xlarge": {
				"Arch": "HVM64"
			},
			"cc2.8xlarge": {
				"Arch": "HVM64"
			}
		},
		"AWSInstanceType2NATArch": {
			"t1.micro": {
				"Arch": "NATPV64"
			},
			"t2.nano": {
				"Arch": "NATHVM64"
			},
			"t2.micro": {
				"Arch": "NATHVM64"
			},
			"t2.small": {
				"Arch": "NATHVM64"
			},
			"t2.medium": {
				"Arch": "NATHVM64"
			},
			"t2.large": {
				"Arch": "NATHVM64"
			},
			"m1.small": {
				"Arch": "NATPV64"
			},
			"m1.medium": {
				"Arch": "NATPV64"
			},
			"m1.large": {
				"Arch": "NATPV64"
			},
			"m1.xlarge": {
				"Arch": "NATPV64"
			},
			"m2.xlarge": {
				"Arch": "NATPV64"
			},
			"m2.2xlarge": {
				"Arch": "NATPV64"
			},
			"m2.4xlarge": {
				"Arch": "NATPV64"
			},
			"m3.medium": {
				"Arch": "NATHVM64"
			},
			"m3.large": {
				"Arch": "NATHVM64"
			},
			"m3.xlarge": {
				"Arch": "NATHVM64"
			},
			"m3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.large": {
				"Arch": "NATHVM64"
			},
			"m4.xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.4xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.10xlarge": {
				"Arch": "NATHVM64"
			},
			"c1.medium": {
				"Arch": "NATPV64"
			},
			"c1.xlarge": {
				"Arch": "NATPV64"
			},
			"c3.large": {
				"Arch": "NATHVM64"
			},
			"c3.xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.4xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.8xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.large": {
				"Arch": "NATHVM64"
			},
			"c4.xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.2xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.4xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.8xlarge": {
				"Arch": "NATHVM64"
			},
			"g2.2xlarge": {
				"Arch": "NATHVMG2"
			},
			"g2.8xlarge": {
				"Arch": "NATHVMG2"
			},
			"r3.large": {
				"Arch": "NATHVM64"
			},
			"r3.xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.4xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.8xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.8xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.8xlarge": {
				"Arch": "NATHVM64"
			},
			"hi1.4xlarge": {
				"Arch": "NATHVM64"
			},
			"hs1.8xlarge": {
				"Arch": "NATHVM64"
			},
			"cr1.8xlarge": {
				"Arch": "NATHVM64"
			},
			"cc2.8xlarge": {
				"Arch": "NATHVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"PV64": "ami-2a69aa47",
				"HVM64": "ami-6869aa05",
				"HVMG2": "ami-61e27177"
			},
			"us-west-2": {
				"PV64": "ami-7f77b31f",
				"HVM64": "ami-7172b611",
				"HVMG2": "ami-60aa3700"
			},
			"us-west-1": {
				"PV64": "ami-a2490dc2",
				"HVM64": "ami-31490d51",
				"HVMG2": "ami-4b694d2b"
			},
			"eu-west-1": {
				"PV64": "ami-4cdd453f",
				"HVM64": "ami-f9dd458a",
				"HVMG2": "ami-2955524f"
			},
			"eu-west-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-886369ec",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-central-1": {
				"PV64": "ami-6527cf0a",
				"HVM64": "ami-ea26ce85",
				"HVMG2": "ami-81ac71ee"
			},
			"ap-northeast-1": {
				"PV64": "ami-3e42b65f",
				"HVM64": "ami-374db956",
				"HVMG2": "ami-46220c21"
			},
			"ap-northeast-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-2b408b45",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-southeast-1": {
				"PV64": "ami-df9e4cbc",
				"HVM64": "ami-a59b49c6",
				"HVMG2": "ami-c212aba1"
			},
			"ap-southeast-2": {
				"PV64": "ami-63351d00",
				"HVM64": "ami-dc361ebf",
				"HVMG2": "ami-0ad2db69"
			},
			"ap-south-1": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-ffbdd790",
				"HVMG2": "ami-ca3042a5"
			},
			"us-east-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-f6035893",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ca-central-1": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-730ebd17",
				"HVMG2": "NOT_SUPPORTED"
			},
			"sa-east-1": {
				"PV64": "ami-1ad34676",
				"HVM64": "ami-6dd04501",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-north-1": {
				"PV64": "ami-77559f1a",
				"HVM64": "ami-8e6aa0e3",
				"HVMG2": "NOT_SUPPORTED"
			}
		}
	},
	"Resources": {
		"ApplicationLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Subnets": {
					"Ref": "Subnets"
				}
			}
		},
		"ALBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "ALBTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "ApplicationLoadBalancer"
				},
				"Port": "80",
				"Protocol": "HTTP"
			}
		},
		"ALBTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 10,
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"Port": 80,
				"Protocol": "HTTP",
				"UnhealthyThresholdCount": 5,
				"VpcId": {
					"Ref": "VpcId"
				},
				"TargetGroupAttributes": [{
						"Key": "stickiness.enabled",
						"Value": "true"
					}, {
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					}, {
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "30"
					}
				]
			}
		},
		"WebServerGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"VPCZoneIdentifier": {
					"Ref": "Subnets"
				},
				"LaunchConfigurationName": {
					"Ref": "LaunchConfig"
				},
				"MinSize": "2",
				"MaxSize": "5",
				"DesiredCapacity": {
					"Ref": "WebServerCapacity"
				},
				"TargetGroupARNs": [{
						"Ref": "ALBTargetGroup"
					}
				]
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT15M",
					"Count": {
						"Ref": "WebServerCapacity"
					}
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService": "2",
					"MaxBatchSize": "2",
					"PauseTime": "PT15M",
					"WaitOnResourceSignals": "true"
				}
			}
		},
		"Scaleup": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"PolicyType": "SimpleScaling",
				"Cooldown": "60",
				"AutoScalingGroupName": {
					"Ref": "WebServerGroup"
				},
				"ScalingAdjustment": 1
			},
			"Metadata": {
				"Comment": "This is simple scaling."
			}
		},
		"CPUAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "10",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "60",
				"AlarmActions": [{
						"Ref": "Scaleup"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebServerGroup"
						}
					}
				],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"Scaledown": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"PolicyType": "SimpleScaling",
				"Cooldown": "60",
				"AutoScalingGroupName": {
					"Ref": "WebServerGroup"
				},
				"ScalingAdjustment": -1
			},
			"Metadata": {
				"Comment": "This is simple scaling."
			}
		},
		"CPUAlarmLow": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "10",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "60",
				"AlarmActions": [{
						"Ref": "Scaledown"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebServerGroup"
						}
					}
				],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"LaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"Comment1": "Configure the bootstrap helpers to install the Apache Web Server and PHP",
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"httpd": [],
								"php": []
							}
						},
						"files": {
							"/var/www/html/index.php": {
								"content": {
									"Fn::Join": [
										"",
										[
											"    <?php\n",
											"      header('Content-Type: application/text; charset=utf-8');\n",
											"      $response = 'Hello world';\n",
											"      echo $response;\n           ",
											"    ?>\n"

										]
									]
								},
								"mode": "000600",
								"owner": "apache",
								"group": "apache"
							},
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ", {
												"Ref": "AWS::StackName"
											},
											"         --resource LaunchConfig ",
											"         --region ", {
												"Ref": "AWS::Region"
											},
											"\n",
											"runas=root\n"
										]
									]
								}
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true"
								},
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI", {
							"Ref": "AWS::Region"
						}, {
							"Fn::FindInMap": [
								"AWSInstanceType2Arch", {
									"Ref": "InstanceType"
								},
								"Arch"
							]
						}
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"SecurityGroups": [{
						"Ref": "WebServerSecurityGroup"
					}
				],
				"KeyName": {
					"Ref": "KeyName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -xe\n",
								"yum update -y aws-cfn-bootstrap\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource LaunchConfig ",
								"         --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"# Signal the status from cfn-init\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource WebServerGroup ",
								"         --region ", {
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				}
			}
		},
		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Fn::Select": [
								0, {
									"Fn::GetAtt": [
										"ApplicationLoadBalancer",
										"SecurityGroups"
									]
								}
							]
						}
					}, {
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					}
				],
				"VpcId": {
					"Ref": "VpcId"
				}
			}
		}
	},
	"Outputs": {
		"WebsiteURL": {
			"Description": "URL for newly created service",
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://", {
							"Fn::GetAtt": [
								"ApplicationLoadBalancer",
								"DNSName"
							]
						}
					]
				]
			}
		}
	}

}
